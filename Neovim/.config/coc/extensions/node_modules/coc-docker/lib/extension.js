"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const coc_nvim_1 = require("coc.nvim");
const dockerComposeCompletionItemProvider_1 = require("./dockerCompose/dockerComposeCompletionItemProvider");
async function activate(context) {
    const config = coc_nvim_1.workspace.getConfiguration().get('docker', {});
    if (config.enable === false) {
        return;
    }
    const serverModule = require.resolve('dockerfile-language-server-nodejs/lib/server.js');
    const serverOptions = {
        module: serverModule,
        transport: coc_nvim_1.TransportKind.ipc,
        args: ["--node-ipc"]
    };
    const clientOptions = {
        documentSelector: ['Dockerfile', 'dockerfile']
    };
    const client = new coc_nvim_1.LanguageClient("docker", "dockerfile-language-server-nodejs", serverOptions, clientOptions);
    context.subscriptions.push(coc_nvim_1.services.registLanguageClient(client), coc_nvim_1.commands.registerCommand("docker.version", async () => {
        const v = require(path_1.default.resolve(__dirname, '..', 'package.json')).version;
        coc_nvim_1.window.showMessage(`Version: ${v}`, 'more');
    }));
    context.subscriptions.push(coc_nvim_1.languages.registerCompletionItemProvider('docker-compose', 'docker', 'yaml.docker-compose', new dockerComposeCompletionItemProvider_1.DockerComposeCompletionItemProvider()));
}
exports.activate = activate;
//# sourceMappingURL=extension.js.map