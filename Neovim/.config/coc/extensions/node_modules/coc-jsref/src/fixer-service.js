"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.loadFixers = exports.parseFixer = exports.filterJsFileName = void 0;
var fs = require("fs-extra");
var path = require("path");
var ast_service_1 = require("./ast-service");
var Range = require("./range");
var Patch = require("./patch");
var fixersPath = path.join(__dirname, './fixers');
var fullPath = function (fileName) { return path.join(fixersPath, fileName); };
function filterJsFileName(fileName) {
    return __awaiter(this, void 0, void 0, function () {
        var stat;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!fileName.match(/\.(j|t)s$/)) {
                        return [2 /*return*/, null];
                    }
                    return [4 /*yield*/, fs.lstat(path.join(fixersPath, fileName))];
                case 1:
                    stat = _a.sent();
                    return [2 /*return*/, stat.isFile() ? fileName : null];
            }
        });
    });
}
exports.filterJsFileName = filterJsFileName;
function parseFixer(fileName) {
    var fixer;
    try {
        fixer = require(fullPath(fileName));
    }
    catch (e) {
        throw new Error("Can't load " + fileName + ' fixer');
    }
    if (!fixer) {
        throw new Error('No export from fixer: ' + fileName);
    }
    // Handle es6 modules
    if (fixer["default"]) {
        fixer = fixer["default"];
    }
    var suggestCodeAction = fixer.suggestCodeAction, createEdit = fixer.createEdit;
    if (!suggestCodeAction || typeof suggestCodeAction !== 'function') {
        throw new Error('Fixer ' + fileName + ' should implement suggestCodeAction');
    }
    if (!createEdit || typeof createEdit !== 'function') {
        throw new Error('Fixer ' + fileName + ' should implement createEdit');
    }
    var name = path.basename(fileName, path.extname(fileName));
    return [
        name,
        {
            suggestCodeAction: suggestCodeAction,
            createEdit: createEdit
        },
    ];
}
exports.parseFixer = parseFixer;
function loadFixers(fixersPath) {
    return __awaiter(this, void 0, void 0, function () {
        var allFileNames, names, fixers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fs.readdir(fixersPath)];
                case 1:
                    allFileNames = _a.sent();
                    return [4 /*yield*/, Promise.all(allFileNames.map(filterJsFileName))];
                case 2:
                    names = _a.sent();
                    fixers = new Map();
                    names
                        .filter(function (f) { return f; })
                        .map(function (n) {
                        return parseFixer(n);
                    })
                        .filter(function (f) { return f; })
                        .forEach(function (_a) {
                        var _b = __read(_a, 2), id = _b[0], fixer = _b[1];
                        fixers.set(id, fixer);
                    });
                    return [2 /*return*/, fixers];
            }
        });
    });
}
exports.loadFixers = loadFixers;
var FixerService = /** @class */ (function () {
    function FixerService(documents, logger) {
        this.documents = documents;
        this.logger = logger;
        this.fixers = new Map();
        this.astService = new ast_service_1["default"](this.documents, this.logger);
    }
    FixerService.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.loadFixers()];
                    case 1:
                        _a.fixers = _b.sent();
                        if (this.fixers.size < 1) {
                            this.logger.log('No fixers loaded');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    FixerService.prototype.getAvailableCommands = function () {
        return __spread(this.fixers.keys());
    };
    FixerService.prototype.suggestCodeActions = function (params) {
        var e_1, _a;
        var uri = params.textDocument.uri;
        var jscodeshift = this.astService.getCodeShift(uri);
        if (!jscodeshift) {
            this.logger.error('No codeshift found for file ' + uri);
            return [];
        }
        var ast = this.astService.getAstTree(uri);
        if (!ast) {
            this.logger.error('Can not build ast for file ' + uri);
            return [];
        }
        var selection = Range.fromProtocolRange(params.range);
        var opts = {
            ast: ast,
            j: jscodeshift,
            selection: selection,
            logger: this.logger,
            config: { packages: [] }
        };
        var actions = [];
        try {
            for (var _b = __values(this.fixers.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), id = _d[0], f = _d[1];
                var suggested = f.suggestCodeAction(opts);
                if (suggested) {
                    actions.push({
                        command: id,
                        title: suggested.title,
                        arguments: [{ uri: uri }, suggested.data]
                    });
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return actions;
    };
    FixerService.prototype.createEdit = function (params) {
        var _a;
        if (!params.arguments) {
            return null;
        }
        var uri = params.arguments[0].uri;
        var fixer = this.fixers.get(params.command);
        if (!fixer) {
            this.logger.error("Fixer " + params.command + " does not exist");
            return null;
        }
        var jscodeshift = this.astService.getCodeShift(uri);
        if (!jscodeshift) {
            return null;
        }
        var ast = this.astService.getAstTree(uri);
        if (!ast) {
            return null;
        }
        var createEditParams = {
            ast: ast,
            j: jscodeshift,
            data: params.arguments[1],
            logger: this.logger
        };
        var edit = fixer.createEdit(createEditParams);
        if (!edit) {
            return null;
        }
        var patches = edit instanceof Array ? edit : [edit];
        return {
            label: params.command,
            edit: {
                changes: (_a = {},
                    _a[uri] = patches.map(Patch.toTextEdit),
                    _a)
            }
        };
    };
    FixerService.prototype.loadFixers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var allFileNames, names, fixers;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fs.readdir(fixersPath)];
                    case 1:
                        allFileNames = _a.sent();
                        return [4 /*yield*/, Promise.all(allFileNames.map(filterJsFileName))];
                    case 2:
                        names = _a.sent();
                        fixers = new Map();
                        names
                            .filter(function (f) { return f; })
                            .map(function (n) {
                            try {
                                return parseFixer(n);
                            }
                            catch (e) {
                                _this.logger.error(e.message);
                                return null;
                            }
                        })
                            .filter(function (f) { return f; })
                            .forEach(function (_a) {
                            var _b = __read(_a, 2), id = _b[0], fixer = _b[1];
                            fixers.set(id, fixer);
                        });
                        return [2 /*return*/, fixers];
                }
            });
        });
    };
    return FixerService;
}());
exports["default"] = FixerService;
