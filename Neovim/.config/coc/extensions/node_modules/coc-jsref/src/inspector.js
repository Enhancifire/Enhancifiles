"use strict";
exports.__esModule = true;
exports.connect = void 0;
// Helps to connect to LSP Inspector.
var stream_1 = require("stream");
var WebSocket = require("ws");
function connect(input, output) {
    var port = 7000;
    var socket;
    try {
        socket = new WebSocket("ws://localhost:" + port);
    }
    catch (e) {
        throw new Error("Can't connect to LSP Inspector on port " + port);
    }
    socket.addEventListener('error', function (event) {
        if (event.error) {
            if (event.error.code === 'ECONNREFUSED') {
                throw new Error("Can't connect to LSP Inspector on port " + port);
            }
            throw event.error;
        }
        throw new Error("Uknown error while connecting to inspector on port " + port);
    });
    var wrappedInput = createLogableStream(input, socket, function (msg) {
        return msg.id ? 'send-request' : 'send-notification';
    });
    var wrappedOutput = createLogableStream(output, socket, function (msg) {
        return msg.id && msg.result === undefined ? 'recv-request' : 'recv-response';
    });
    input.pipe(wrappedInput);
    wrappedOutput.pipe(output);
    return {
        input: wrappedInput,
        output: wrappedOutput
    };
}
exports.connect = connect;
function createLogableStream(source, socket, formatType) {
    var incommingText = '';
    return new stream_1.Transform({
        transform: function (chunk, encoding, callback) {
            incommingText += String(chunk);
            if (socket.readyState === WebSocket.OPEN) {
                var messageParts = incommingText.split('\r\n\r\n');
                if (messageParts.length) {
                    var messageText = messageParts[messageParts.length - 1];
                    try {
                        var message = JSON.parse(messageText);
                        incommingText = '';
                        var logEntry = {
                            isLSPMessage: true,
                            type: formatType(message),
                            message: message,
                            timestamp: Date.now()
                        };
                        socket.send("[LSP   - 0:00:00 PM] " + JSON.stringify(logEntry) + "\r\n");
                    }
                    catch (e) { }
                }
            }
            callback(null, chunk);
        }
    });
}
