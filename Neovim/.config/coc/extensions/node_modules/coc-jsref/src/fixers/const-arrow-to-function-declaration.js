"use strict";
exports.__esModule = true;
var Range = require("../range");
var Ast = require("../ast");
var Patch = require("../patch");
var fixer = {
    suggestCodeAction: function (params) {
        var j = params.j, ast = params.ast;
        var node = Ast.findFirstNode(ast, j.VariableDeclaration, function (n) {
            if (!n.loc || n.kind !== 'const' || n.declarations.length !== 1) {
                return false;
            }
            if (!Range.isInside(params.selection, n.loc)) {
                return false;
            }
            var declarator = n.declarations[0];
            if (!j.VariableDeclarator.check(declarator)) {
                return false;
            }
            return j.Identifier.check(declarator.id) && j.ArrowFunctionExpression.check(declarator.init);
        });
        if (!node || !node.loc) {
            return null;
        }
        if (j(node).find(j.ThisExpression).length) {
            return null;
        }
        return {
            title: "Convert to function declaration",
            data: node.loc.start
        };
    },
    createEdit: function (params) {
        var data = params.data, ast = params.ast, j = params.j;
        var decl = Ast.findFirstNode(ast, j.VariableDeclaration, function (n) { return Ast.isOnPosition(n, data); });
        if (!decl) {
            return null;
        }
        var declarator = decl.declarations[0];
        if (!j.VariableDeclarator.check(declarator)) {
            return null;
        }
        var name = declarator.id;
        if (!j.Identifier.check(name)) {
            return null;
        }
        var init = declarator.init;
        if (!j.ArrowFunctionExpression.check(init)) {
            return null;
        }
        var body = init.body;
        if (!j.BlockStatement.check(body)) {
            body = j.blockStatement([j.returnStatement(body)]);
        }
        var node = j.functionDeclaration(name, init.params, body, init.generator);
        node.async = init.async;
        return Patch.replaceNode(j, decl, node);
    }
};
exports["default"] = fixer;
