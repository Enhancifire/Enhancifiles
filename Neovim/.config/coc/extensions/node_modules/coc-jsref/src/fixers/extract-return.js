"use strict";
exports.__esModule = true;
var Range = require("../range");
var Ast = require("../ast");
var Patch = require("../patch");
var fixer = {
    suggestCodeAction: function (params) {
        var j = params.j, ast = params.ast;
        var node = Ast.findLastNode(ast, j.ReturnStatement, function (n) { return n.loc !== null && Range.isInside(params.selection, n.loc); });
        if (!node || !node.loc || !node.argument) {
            return null;
        }
        return {
            title: "Extract return argument",
            data: node.loc.start
        };
    },
    createEdit: function (params) {
        var data = params.data, ast = params.ast, j = params.j;
        var node = Ast.findFirstNode(ast, j.ReturnStatement, function (n) { return Ast.isOnPosition(n, data); });
        if (!node) {
            return null;
        }
        var loc = node.loc;
        if (!loc) {
            return null;
        }
        var arg = node.argument;
        if (!arg) {
            return null;
        }
        var varName = 'result';
        var id = j.identifier(varName);
        var declarator = j.variableDeclarator(id, arg);
        var declaration = j.variableDeclaration('const', [declarator]);
        var newNode = j.returnStatement(id);
        // Check if return has spaces on left side
        var leftPad = loc.start.column || 0;
        var spaceBetweenNewNodes = '\n\n'; // one empty line
        while (leftPad > 0) {
            spaceBetweenNewNodes += ' ';
            leftPad--;
        }
        return [Patch.replaceNode(j, node, [declaration, spaceBetweenNewNodes, newNode])];
    }
};
exports["default"] = fixer;
