"use strict";
exports.__esModule = true;
var Range = require("../range");
var Ast = require("../ast");
var Patch = require("../patch");
var fixer = {
    suggestCodeAction: function (params) {
        var j = params.j, ast = params.ast;
        var collection = ast.find(j.ArrowFunctionExpression, function (n) {
            if (n.loc !== null &&
                Range.isInside(params.selection, n.loc) &&
                j.BlockStatement.check(n.body) &&
                n.body.body.length === 1) {
                var retSt = n.body.body[0];
                if (j.ReturnStatement.check(retSt) && retSt.argument) {
                    return true;
                }
            }
            return false;
        });
        if (collection.size() !== 1) {
            return null;
        }
        var node = collection.nodes()[0];
        if (!node.loc) {
            return null;
        }
        return {
            title: "Use implicit return",
            data: node.loc.start
        };
    },
    createEdit: function (params) {
        var data = params.data, ast = params.ast, j = params.j;
        var node = Ast.findFirstNode(ast, j.ArrowFunctionExpression, function (n) { return Ast.isOnPosition(n, data); });
        if (!node) {
            return null;
        }
        if (!j.BlockStatement.check(node.body)) {
            return null;
        }
        var retSt = node.body.body[0];
        if (!retSt) {
            return null;
        }
        if (!j.ReturnStatement.check(retSt) || !retSt.argument) {
            return null;
        }
        var returnArg = retSt.argument;
        if (j.ObjectExpression.check(returnArg)) {
            returnArg = j.parenthesizedExpression(returnArg);
        }
        return Patch.replaceNode(j, node.body, returnArg);
    }
};
exports["default"] = fixer;
