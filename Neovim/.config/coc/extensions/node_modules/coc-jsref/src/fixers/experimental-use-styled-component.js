"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
exports.__esModule = true;
var Range = require("../range");
var Position = require("../pos");
var Ast = require("../ast");
var Patch = require("../patch");
var text_utils_1 = require("../text-utils");
function hasStyledImport(j, ast) {
    var styletronSpecifiers = getImportSpecifiers(j, ast, 'styletron-react');
    var styledSpecifier = styletronSpecifiers.find(function (s) {
        return j.ImportSpecifier.check(s) && j.Identifier.check(s.imported) && s.imported.name === 'styled';
    });
    return Boolean(styledSpecifier);
}
function getDefaultImportName(j, ast, module) {
    var node = Ast.findFirstNode(ast, j.ImportDeclaration, function (n) {
        return n.specifiers.length === 1 &&
            j.Identifier.check(n.specifiers[0].local) &&
            n.source.value === module;
    });
    var specifiers = getImportSpecifiers(j, ast, module);
    var defSpec = specifiers.find(function (s) { return j.ImportDefaultSpecifier.check(s); });
    if (!defSpec || !j.Identifier.check(defSpec.local)) {
        return null;
    }
    return defSpec.local.name;
}
function getImportSpecifiers(j, ast, module) {
    var node = Ast.findFirstNode(ast, j.ImportDeclaration, function (n) { return n.specifiers.length === 1 && n.source.value === module; });
    if (!node) {
        return [];
    }
    return node.specifiers;
}
function getTagName(j, node) {
    return j.MemberExpression.check(node.callee) &&
        j.Identifier.check(node.callee.object) &&
        j.Identifier.check(node.callee.property)
        ? node.callee.property.name
        : null;
}
function isLowerCase(word) {
    return word === word.toLowerCase();
}
var fixer = {
    suggestCodeAction: function (params) {
        var j = params.j, ast = params.ast;
        var rDomVar = getDefaultImportName(j, ast, 'r-dom');
        var node = Ast.findLastNode(ast, j.CallExpression, function (n) {
            return n.loc !== null &&
                Range.isInside(params.selection, n.loc) &&
                j.MemberExpression.check(n.callee) &&
                j.Identifier.check(n.callee.object) &&
                n.callee.object.name === rDomVar &&
                j.Identifier.check(n.callee.property);
        });
        if (node && node.loc) {
            var tag = getTagName(j, node);
            return {
                title: "Extract \"" + tag + "\" to styled component",
                data: { start: node.loc.start, type: 'rdom' }
            };
        }
        var jsxElement = Ast.findLastNode(ast, j.JSXElement, function (n) {
            return n.loc !== null &&
                Range.isInside(params.selection, n.loc) &&
                j.JSXIdentifier.check(n.openingElement.name) &&
                isLowerCase(n.openingElement.name.name);
        });
        if (!jsxElement || !jsxElement.loc) {
            return null;
        }
        var jsxNode = jsxElement.openingElement;
        if (jsxNode && jsxNode.loc && j.JSXIdentifier.check(jsxNode.name)) {
            var tag = jsxNode.name.name;
            return {
                title: "Extract \"" + tag + "\" to styled component",
                data: { start: jsxElement.loc.start, type: 'jsx' }
            };
        }
        return null;
    },
    createEdit: function (params) {
        var data = params.data, ast = params.ast, j = params.j;
        if (data.type === 'rdom') {
            var node_1 = Ast.findLastNode(ast, j.CallExpression, function (n) { return Ast.isOnPosition(n, data.start); });
            if (!node_1) {
                return null;
            }
            var rDomVar = getDefaultImportName(j, ast, 'r-dom');
            if (!rDomVar) {
                return null;
            }
            var tag_1 = getTagName(j, node_1);
            if (!tag_1) {
                return null;
            }
            var componentName_1 = 'Styled' + text_utils_1.capitalize(tag_1);
            var patches_1 = [];
            var newNode_1 = j.callExpression(j.identifier(rDomVar), __spread([
                j.identifier(componentName_1)
            ], node_1.arguments));
            patches_1.push(Patch.replaceNode(j, node_1, newNode_1));
            var lastImport_1 = Ast.findLastNode(ast, j.ImportDeclaration, function () { return true; });
            var declarationStart_1 = lastImport_1 && lastImport_1.loc
                ? Position.create(lastImport_1.loc.end.line, lastImport_1.loc.end.column)
                : Position.create(1, 0);
            var topInserts_1 = ['\n'];
            var shouldInsertStyledImport_1 = !hasStyledImport(j, ast);
            if (shouldInsertStyledImport_1) {
                var styledImport = j.importDeclaration([j.importSpecifier(j.identifier('styled'))], j.literal('styletron-react'));
                topInserts_1.push(styledImport);
                topInserts_1.push('\n');
            }
            topInserts_1.push('\n');
            var styledComponentDeclaration_1 = j.variableDeclaration('const', [
                j.variableDeclarator(j.identifier(componentName_1), j.callExpression(j.identifier('styled'), [j.literal(tag_1), j.objectExpression([])])),
            ]);
            topInserts_1.push(styledComponentDeclaration_1);
            patches_1.push(Patch.insert(j, declarationStart_1, topInserts_1));
            return patches_1;
        }
        var elementNode = Ast.findLastNode(ast, j.JSXElement, function (n) { return Ast.isOnPosition(n, data.start); });
        if (!elementNode) {
            return null;
        }
        var node = elementNode.openingElement;
        var tag = j.JSXIdentifier.check(node.name) && node.name.name;
        if (!tag) {
            return null;
        }
        var componentName = 'Styled' + text_utils_1.capitalize(tag);
        var patches = [];
        var newNode = Ast.cloneNode(j, node);
        newNode.name = j.jsxIdentifier(componentName);
        newNode.attributes = newNode.attributes.filter(function (attr) {
            return !(j.JSXAttribute.check(attr) &&
                j.JSXIdentifier.check(attr.name) &&
                attr.name.name === 'style');
        });
        if (!node.selfClosing && elementNode.closingElement) {
            var newNode_2 = Ast.cloneNode(j, elementNode.closingElement);
            newNode_2.name = j.jsxIdentifier(componentName);
            patches.push(Patch.replaceNode(j, elementNode.closingElement, newNode_2));
        }
        patches.push(Patch.replaceNode(j, node, newNode));
        var lastImport = Ast.findLastNode(ast, j.ImportDeclaration, function () { return true; });
        var declarationStart = lastImport && lastImport.loc
            ? Position.create(lastImport.loc.end.line, lastImport.loc.end.column)
            : Position.create(1, 0);
        var topInserts = lastImport ? ['\n'] : [];
        var shouldInsertStyledImport = !hasStyledImport(j, ast);
        if (shouldInsertStyledImport) {
            var styledImport = j.importDeclaration([j.importSpecifier(j.identifier('styled'))], j.literal('styletron-react'));
            topInserts.push(styledImport);
            topInserts.push('\n');
        }
        topInserts.push('\n');
        var styledComponentDeclaration = j.variableDeclaration('const', [
            j.variableDeclarator(j.identifier(componentName), j.callExpression(j.identifier('styled'), [j.literal(tag), j.objectExpression([])])),
        ]);
        topInserts.push(styledComponentDeclaration);
        topInserts.push('\n');
        topInserts.push('\n');
        patches.push(Patch.insert(j, declarationStart, topInserts));
        return patches;
    }
};
exports["default"] = fixer;
