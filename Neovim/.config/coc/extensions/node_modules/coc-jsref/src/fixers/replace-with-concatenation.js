"use strict";
exports.__esModule = true;
var Range = require("../range");
var Ast = require("../ast");
var Patch = require("../patch");
var fixer = {
    suggestCodeAction: function (params) {
        var j = params.j, ast = params.ast;
        var node = Ast.findFirstNode(ast, j.TemplateLiteral, function (n) { return n.loc !== null && Range.isInside(params.selection, n.loc); });
        if (!node || !node.loc) {
            return null;
        }
        return {
            title: "Convert to regular string",
            data: node.loc.start
        };
    },
    createEdit: function (params) {
        var data = params.data, ast = params.ast, j = params.j;
        var node = Ast.findFirstNode(ast, j.TemplateLiteral, function (n) { return Ast.isOnPosition(n, data); });
        if (!node) {
            return null;
        }
        var expressions = [];
        var firstStrValue = node.quasis[0].value.cooked;
        if (firstStrValue) {
            expressions.push(j.stringLiteral(firstStrValue));
        }
        for (var i = 0; i < node.expressions.length; i++) {
            var expr = node.expressions[i];
            expressions.push(expr);
            var strValue = node.quasis[i + 1].value.cooked;
            if (strValue) {
                expressions.push(j.stringLiteral(strValue));
            }
        }
        if (expressions.length === 0) {
            expressions.push(j.stringLiteral(firstStrValue));
        }
        function combineExpressions(rightIndex) {
            if (rightIndex === 0) {
                return expressions[0];
            }
            return j.binaryExpression('+', combineExpressions(rightIndex - 1), expressions[rightIndex]);
        }
        var combinedExpr = combineExpressions(expressions.length - 1);
        return Patch.replaceNode(j, node, combinedExpr);
    }
};
exports["default"] = fixer;
