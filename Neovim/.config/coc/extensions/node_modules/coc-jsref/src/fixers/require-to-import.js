"use strict";
exports.__esModule = true;
var Range = require("../range");
var Ast = require("../ast");
var Patch = require("../patch");
var fixer = {
    suggestCodeAction: function (params) {
        var j = params.j, ast = params.ast;
        var node = Ast.findFirstNode(ast, j.CallExpression, function (n) {
            return j.Identifier.check(n.callee) &&
                n.callee.name === 'require' &&
                !!n.loc &&
                Range.isInside(params.selection, n.loc);
        });
        if (!node || !node.loc) {
            return null;
        }
        return {
            title: 'Convert require to ES import',
            data: node.loc.start
        };
    },
    createEdit: function (params) {
        var data = params.data, ast = params.ast, j = params.j;
        var collection = Ast.find(ast, j.CallExpression, function (n) { return Ast.isOnPosition(n, data); });
        var fnode = Ast.firstNode(collection);
        if (!fnode) {
            return null;
        }
        var arg = fnode.arguments[0];
        var importPath = j.Literal.check(arg) ? arg.value : 'unknown';
        var vd = collection.closest(j.VariableDeclaration);
        if (vd.size() === 1) {
            var vnode = Ast.firstNode(vd);
            if (!vnode) {
                return null;
            }
            var pc = collection.closest(j.VariableDeclarator);
            if (pc.size()) {
                var p = Ast.firstNode(pc);
                if (p && j.Identifier.check(p.id)) {
                    var importVar = p.id.name;
                    var decl = j.importDeclaration([j.importDefaultSpecifier(j.identifier(importVar))], j.literal(importPath), 'value');
                    return Patch.replaceNode(j, vnode, decl);
                }
            }
        }
        var source = j.literal(importPath);
        var declaration = j.importDeclaration([], source);
        return Patch.replaceNode(j, fnode, declaration);
    }
};
exports["default"] = fixer;
