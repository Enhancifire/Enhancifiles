"use strict";
exports.__esModule = true;
exports.replaceNode = exports.del = exports.insert = exports.replace = exports.toTextEdit = void 0;
var Range = require("./range");
function toTextEdit(patch) {
    return {
        newText: patch.newText,
        range: Range.toProtocol(patch.range)
    };
}
exports.toTextEdit = toTextEdit;
function replace(range, newText) {
    return { range: range, newText: newText };
}
exports.replace = replace;
function insert(j, position, entries) {
    var newText = entries.map(function (n) { return (typeof n === 'string' ? n : j(n).toSource()); }).join('');
    return {
        range: { start: position, end: position },
        newText: newText
    };
}
exports.insert = insert;
function del(range) {
    return { range: range, newText: '' };
}
exports.del = del;
function replaceNode(j, oldNode, newNode) {
    var loc = oldNode.loc;
    if (!loc) {
        throw new Error('old node should have location');
    }
    var newNodes = Array.isArray(newNode) ? newNode : [newNode];
    var newCode = newNodes.map(function (n) { return (typeof n === 'string' ? n : j(n).toSource()); }).join('');
    return replace(Range.create(loc.start.line, loc.start.column, loc.end.line, loc.end.column), newCode);
}
exports.replaceNode = replaceNode;
