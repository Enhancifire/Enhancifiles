/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.create = void 0;
var vscode_languageserver_1 = require("vscode-languageserver");
var fixer_service_1 = require("./fixer-service");
var logger_1 = require("./logger");
var Inspector = require("./inspector");
var minimist = require("minimist");
var argv = minimist(process.argv.slice(2));
function createLspConnection() {
    if (argv.stdio && argv.lspi) {
        var _a = Inspector.connect(process.stdin, process.stdout), input = _a.input, output = _a.output;
        return vscode_languageserver_1.createConnection(input, output);
    }
    else {
        return vscode_languageserver_1.createConnection(vscode_languageserver_1.ProposedFeatures.all);
    }
}
function createLogger(connection) {
    if (argv.log) {
        return logger_1.createFileLogger(argv.log);
    }
    else if (argv.debug) {
        return logger_1.createConnectionLogger(connection);
    }
    return logger_1.createNoopLogger();
}
function create() {
    var connection = createLspConnection();
    var logger = createLogger(connection);
    var documents = new vscode_languageserver_1.TextDocuments();
    documents.listen(connection);
    var fixerService = new fixer_service_1["default"](documents, logger);
    connection.onInitialize(onInitialize);
    connection.listen();
    // Handlers
    function onInitialize() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fixerService.start()
                        // handle trace
                    ];
                    case 1:
                        _a.sent();
                        // handle trace
                        connection.onCodeAction(onCodeAction);
                        connection.onExecuteCommand(onExecuteCommand);
                        return [2 /*return*/, {
                                capabilities: {
                                    textDocumentSync: documents.syncKind,
                                    codeActionProvider: true,
                                    executeCommandProvider: {
                                        commands: fixerService.getAvailableCommands()
                                    }
                                }
                            }];
                }
            });
        });
    }
    function onCodeAction(params) {
        try {
            return fixerService.suggestCodeActions(params);
        }
        catch (e) {
            logger.error('onCodeAction error: ' + e.message + ' :: ' + e.stack);
            return [];
        }
    }
    function onExecuteCommand(params) {
        return __awaiter(this, void 0, void 0, function () {
            var edit, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        edit = fixerService.createEdit(params);
                        if (!edit) return [3 /*break*/, 2];
                        return [4 /*yield*/, connection.workspace.applyEdit(edit)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        logger.error('Error creating edit. ' + e_1.message + '\n' + e_1.stack);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
}
exports.create = create;
