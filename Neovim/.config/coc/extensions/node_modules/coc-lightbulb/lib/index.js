var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// src/index.ts
__markAsModule(exports);
__export(exports, {
  Lightbulb: () => Lightbulb,
  activate: () => activate
});
var import_coc = __toModule(require("coc.nvim"));
var Lightbulb = class {
  async show(doc, only) {
    var _a;
    (_a = this.tokenSource) == null ? void 0 : _a.cancel();
    this.tokenSource = new import_coc.CancellationTokenSource();
    const token = this.tokenSource.token;
    if (!doc) {
      doc = await import_coc.workspace.document;
    }
    const range = await import_coc.workspace.getSelectedRange("cursor", doc);
    if (!range)
      return false;
    const diagnostics = import_coc.diagnosticManager.getDiagnosticsInRange(doc.textDocument, range);
    const context = {diagnostics};
    if (only && only.length > 0) {
      context.only = only;
    }
    let codeActions = await import_coc.languages.getCodeActions(doc.textDocument, range, context, token);
    if (!codeActions || codeActions.length == 0)
      return false;
    codeActions = codeActions.filter((o) => !o.disabled);
    return codeActions.length > 0;
  }
};
var ns = import_coc.workspace.createNameSpace("coc-lightbulb");
var lightbulb = new Lightbulb();
async function activate(extCtx) {
  const config = import_coc.workspace.getConfiguration("lightbulb");
  const only = config.get("only", []);
  const excludeFiletypes = config.get("excludeFiletypes", []);
  const enableVirtualText = config.get("enableVirtualText");
  const virtualText = config.get("virtualText");
  const enableSign = config.get("enableSign");
  const signText = config.get("signText");
  const statusText = config.get("statusText");
  const nvim = import_coc.workspace.nvim;
  if (enableVirtualText)
    await nvim.command("hi default LightBulbVirtualText guifg=#FDD164");
  if (enableSign) {
    await nvim.command("hi default LightBulbSign guifg=#FDD164");
    await nvim.command(`sign define LightBulbSign text=${signText.replace(" ", "")} texthl=LightBulbSign linehl=LightBulbSignLine`);
  }
  extCtx.subscriptions.push(import_coc.events.on(["CursorHold", "CursorHoldI"], async () => {
    const doc = await import_coc.workspace.document;
    if (excludeFiletypes.includes(doc.filetype))
      return;
    const buffer = doc.buffer;
    buffer.setVar("coc_lightbulb_status", "");
    if (enableVirtualText)
      buffer.clearNamespace(ns);
    if (enableSign)
      buffer.unplaceSign({group: "CocLightbulb"});
    if (!await lightbulb.show(doc, only))
      return;
    buffer.setVar("coc_lightbulb_status", statusText);
    if (enableVirtualText)
      buffer.setVirtualText(ns, (await import_coc.workspace.getCurrentState()).position.line, [
        [virtualText, "LightBulbVirtualText"]
      ]);
    if (enableSign)
      buffer.placeSign({
        lnum: (await import_coc.workspace.getCurrentState()).position.line + 1,
        name: "LightBulbSign",
        group: "CocLightbulb"
      });
  }));
}
